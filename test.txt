
三子棋
#pragma once
#define ROW 3
#define COL 3
//初始化棋盘
void InitBoard(char board[][ROW],int row,int col);
//打印棋盘
void ShowBoard(char board[][ROW],int row,int col);
//玩家移动
void PlayerMove(char board[][ROW],int row,int col);
//是否赢得了胜利
int IsWin(char board[][ROW],int row,int col);
//电脑移动
void ComputerMove(char board[][ROW],int row,int col);

void InitBoard(char arr[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;
    for(i = 0; i < row; i++)
        for (j = 0; j < col; j++)
        {
            arr[i][j] = ' ';    
        }
}
void ShowBoard(char arr[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;
    printf("----------\n");
    for (i = 0; i < row; i++)
    {
        printf("|");
        for (j = 0; j < col; j++)
        {
            printf("%2c|", arr[i][j]);
        }
        printf("\n----------\n");
    }
}

void  PlayerMove(char arr[ROW][COL], int row, int col)
{
    int x = 0;
    int y = 0;
    while (1)
    {
        scanf("%d,%d", &x, &y);
        if((0 <= x && x <= row - 1) && (0 <= y && y <= col - 1))
        {
            if (board[x - 1][y - 1] == ' ')
            {
             board[x - 1][y - 1] = 'X';
             break;
             }
            else {
                printf("请重新选择\n");
            }
        }
    else {
        printf("请在棋盘里面下棋\n");
    }
    }
}
void ComputerMove(char arr[ROW][COL], int row, int col)
{
    srand((unsigned int)time(NULL));
    while (1)
    {
        int x = rand() % 3;
        int y = rand() % 3;
        if (arr[x][y] == ' ')
        {
            arr[x][y] = 'O';
            break;
        }
    }
}
int Checkfull(char arr[ROW][COL], int row, int col)
{
    int i = 0;
    int j = 0;
    for(i = 0; i < row; i++)
        for (j = 0; j < col; j++)
        {
            if (arr[i][j] == ' ')
                return 1;
        }
    return 0;
}
int IsWin(char arr[ROW][COL], int row, int col)
{
    int i = 0;
    if (Checkfull(arr, ROW, COL) == 0)
    {
        return 'P';
    }
    for (i = 0; i < row; i++)
    {
        if ((arr[i][0] == arr[i][1]) && (arr[i][1] == arr[i][2]) && (arr[i][2] != ' '))
        {
            return arr[i][0];
        }
    }
    for (i = 0; i < col; i++)
    {
        if ((arr[0][i] == arr[1][i]) && (arr[1][i] == arr[2][i]) && (arr[2][i] != ' '))
        {
            return arr[0][i];
        }
    }
    if ((arr[0][0] == arr[1][1]) && (arr[1][1] == arr[2][2]) && (arr[2][2] != ' '))
    {
        return arr[0][0];
    }
    if ((arr[0][2] == arr[1][1]) && (arr[1][1] == arr[2][0]) && (arr[2][0] != ' '))
    {
        return arr[0][2];
    }
    return ' ';
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include"game.h"

int meau()
{
    printf("***************************************\n");
    printf("*************** 1. play  **************\n");
    printf("*************** 0. exit  **************\n");
    printf("***************************************\n");
    return 0;
}
void game()
{
    char arr[ROW][COL];
    InitBoard(arr, ROW, COL);
    while(1)
    {
        printf("电脑\n");
        Computer(arr, ROW, COL);
        Display(arr, ROW, COL);
        if (Win(arr, ROW, COL) != ' ')
        {
            break;
        }
        printf("玩家\n");
        Player(arr, ROW, COL);
        Display(arr, ROW, COL);
        if (Win(arr, ROW, COL) != ' ')
        {
            break;
        }
    }
    if (Win(arr, ROW, COL) == 'X')
    {
        printf("玩家赢\n");
    }
    else if (Win(arr, ROW, COL) == 'O')
    {
        printf("电脑赢\n");
    }
    else if (Win(arr, ROW, COL) == 'P')
    {
        printf("平局\n");
    }
}

int main()
{
    int a = 0;
    do
    {
        meau();
        printf("请选择：");
        scanf("%d", &a);
        switch (a)
        {
        case 1:
            game();
        case 0:
            printf("退出游戏\n");
            break;
        default:
            printf("重新选择\n");
        }
    } while (a);
    system("pause");
    return 0;
}




在屏幕上打印杨辉三角。 
int main()
{
    int i;
    int j;
    int a[N][N];
    for (i = 0; i < N; i++)
    {
        a[i][0] = 1;
        a[i][i] = 1;//使对角线的元素值为1
    }
    for (i = 2; i < N; i++)
    {
        for (j = 1; j < i; j++)
        {
            a[i][j] = a[i - 1][j - 1] + a[i - 1][j];
        }
    }
    for (i = 0; i < N; i++)
    {
       
        for (j = 0; j <= i; j++)
        {
            printf("%d", a[i][j]);
        }
        printf("\n");
     }

	system("pause");
	return 0;
}
  日本某地发生了一件谋杀案，警察通过排查确定杀人凶手必为4个。
嫌疑犯的一个。以下为4个嫌疑犯的供词。
A说：不是我。
B说：是C。
C说：是D。
D说：C在胡说
已知3个人说了真话，1个人说的是假话。
现在请根据这些信息，写一个程序来确定到底谁是凶手。


#include<stdio.h>
int main()
{
	char killer;
	for (killer = 'A'; killer <= 'D'; killer++)
	{
		if (((killer != 'A') + (killer == 'C') + (killer == 'D') + (killer != 'D')) == 3)
		{
			printf("凶手是%c\n", killer);
			break;
		}
	}
 
	system("pause");
	return 0;
}




5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果
A选手说：B第二，我第三；
B选手说：我第二，E第四；
C选手说：我第一，D第二；
D选手说：C最后，我第三；
E选手说：我第四，A第一；
比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。

int main()
{
    int a = 0, b = 0, c = 0, d = 0, e = 0;
    for (a = 1; a <= 5; a++)
    {
        for (b = 1; b <= 5; b++)
        {
            for (c = 1; c <= 5; c++)
            {
                for (d = 1; d <= 5; d++)
                {
                    for (e = 1; e <= 5; e++)
                    {
                        if ((2 == b && 3 != a) || (2 != b && 3 == a) == 1)
                        {
                            if ((2 == b && 4 != e) || (2 != b && 4 == e) == 1)
                            {
                                if ((1 == c && 2 != d) || (1 != c && 2 == d) == 1)
                                {
                                    if ((5 == c && 3 != d) || (5 != c && 3 == d) == 1)
                                    {
                                        if ((4 == e && 1 != a) || (4 != e && 1 == a) == 1)
                                        {//对五个值均不相同的判断
                                            if (((a != b) && (a != c) && (a != d) && (a != e))
                                                && ((b != c) && (b != d) && (b != e))
                                                && ((c != d) && (c != e))
                                                && ((d != e)))
                                            {
                                                printf("a= %d, b= %d,c= %d,d= %d,e= %d\n", a, b, c, d, e);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return 0;
}


两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？
输入例子:
1999 2299
输出例子:7
int fun(int m,int n)
{
	int tmp = m^n;
	int count = 0;
	while(tmp!=0)
	{
		count++;
		tmp=tmp&(tmp-1);
	}
}
int main()
{
	int n,m;
	printf("请输入两个整数：");
	scanf("%d %d", &n, &m);
	printf("%d",fun(m,n));
    system ("pause");
	return 0;
}
 
获取一个数二进制序列中所有的偶数位和奇数位，
分别输出二进制序列。

void print(int n)
{
	int i = 0;
	for(i=31;i>=1;i-=2)
	{
		printf("%d",((n>>i)&1));
	}
	printf("%d\n");
	for(i=30;i>=0;i-=2)
	{
		printf("%d",((n>>i)&1));
	}

}
int main()	
{
	int n;
	scanf("%d",&n);
	print(n);
    system ("pause");
	return 0;
}


输出一个整数的每一位。 
int main()
{
	int i = 0;
	int n;
	scanf("%d",&n);
	for(i = 0;i<32;i++)
	{
		if(((n>> i)&1)==1)
		{
			printf("1");
		}
		else
		{
			printf("0");
		}
	}
    system ("pause");
	return 0;
}


写一个函数返回参数二进制中 1 的个数
比如： 15 0000 1111 4 个 1
程序原型：
int count_one_bits(unsigned int value)
{ 
int count_one_bits(unsigned int value) 
{
	
   int i = 0;
   int count = 0;
    for(i = 0;i < 32;i++)
   {
	   if(((value>>i)&1) == 1)
	   {
		   count++;
	   }
   }
   printf("count = %d\n",count);
   return 0;
}
int main()
{
	int n;
	scanf("%d",&n);
	count_one_bits(n);
    system ("pause");
	return 0;
}


递归方式实现打印一个整数的每一位 
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<windows.h>
void PrintDig(int num)
{
	if(num<10)
	{
		printf("%d ",num);
	}
	else
	{
		printf("%d ",num%10);
	   PrintDig(num/10);
		
	}
		
	

}
int main()
{
	int num;
	scanf("%d",&num);
	PrintDig(num);
	system("pause");
	return 0;

}

一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和
int fun(int n)
{
	if (n <= 9)
	{
		return n;
	}
	else
	{
	 return (n%10)+fun(n/10);
	}
	
}
int main()
{
	int n;
	printf("n:");
	scanf("%d",&n);
	printf("%d\n",	fun(n));	
    system("pause");
    return 0;



.递归和非递归分别实现求n的阶乘 

非递归
int jiec(int n)
{
	int i;
	int sum = 1;
	for(i=1;i<=n;i++)
	{
	  sum*=i;
	}
	return 	sum;
	 
}
int main()
{
	int n;
	printf("Please enter an number;");
	scanf("%d",&n);
	printf("%d\n",	jiec(n));	
    system("pause");
    return 0;
}



递归
int jiec(int n)
{
	if(n==1)
	{
	 return 1;
	}
	else
	{
      return n*jiec(n-1);
	}
	
}
int main()
{
	int n ;
	
	scanf("%d",&n);
	
	jiec(n);
	printf("%d\n",jiec(n));
    system("pause");
 
	return 0;
}



编写一个函数实现n^k，使用递归实现 
int Find_num(int n,int k)
 {
     if (k == 0)
     {
       return 1;
     }
       if (k == 1)    
	  {        
		 return n;
      }   
	  else
	  {
        return n*Find_num(n, k - 1);  
	  }
}
int main()
{
	int n = 0;
	int k = 0;
	int ret = 0;
	scanf("%d %d",&n,&k);
	ret = Find_num( n, k);
	printf("%d\n", ret );
    system("pause");
 
	return 0;
}


递归和非递归分别实现求第n个斐波那契数。 
int febo(int n)  非
{
	int a = 1;
	int b = 1;
	int c = 0;
	int i = 0;
	for(i=3;i<=n;i++)
	{
		c=a+b;
		a=b;
		b=c;
	}
	return c;
}

int main()
{
	unsigned int n = 0;
	scanf("%d",&n);
    printf("%d\n",febo(n));
	system("pause");
	return 0;
}







递归
int febo(int n)
{   
	if(n==1||n==2)
	{ 
		return 1;
	}
	return febo(n-1)+febo(n-2);
}
int main()
{
	unsigned int n = 0;
	scanf("%d",&n);
    printf("%d\n",febo(n));
	system("pause");
	return 0;
}
	


	
	
	








	